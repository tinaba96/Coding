# ------------------------------
# ABCDEFG
# ------------------------------
import sys

# inputの置き換え
input = sys.stdin.readline

# ヘッダの読み込み
[p, q] = input().split()

A = ["A", "B", "C", "D", "E", "F", "G"]
L = [3, 1, 4, 1, 5, 9]
D = dict(zip(A, range(len(A))))

S = [0] * (len(L) + 1)
# 累積和
for i in range(1, len(S)):
    S[i] = S[i - 1] + L[i - 1]

# 区間和
if D[p] < D[q]:
    print(S[D[q]] - S[D[p]])
else:
    print(S[D[p]] - S[D[q]])




'''
D = dict(zip(A, range(len(A))))
このコードは、リスト `A` の要素をキーとして、そのインデックスを値とする辞書 `D` を作成します。

具体的には、`zip(A, range(len(A)))` は、リスト `A` と `range(len(A))` を同時にイテレートし、それぞれの要素をペアとしてまとめたイテラブルなオブジェクトを生成します。例えば、`A = [10, 20, 30]` の場合、`zip(A, range(len(A)))` は、`(10, 0), (20, 1), (30, 2)` のようなタプルを順に生成します。

そして、`dict()` 関数は、与えられたキーと値のペアから辞書を作成します。`zip()` 関数で生成されたタプルの各要素は、キーと値のペアとなります。したがって、`dict(zip(A, range(len(A))))` は、キーとして `A` の要素、値として `A` の要素のインデックスを持つ辞書を生成します。

例えば、`A = ['apple', 'banana', 'orange']` の場合、`D` は次のようになります：

```
D = {'apple': 0, 'banana': 1, 'orange': 2}
```

このように、`D` のキーは `A` の要素であり、値は `A` の要素のインデックスとなります。これによって、辞書 `D` を使用することで、ある要素が `A` の中で何番目に位置するかを効率的に調べることができます。
'''
